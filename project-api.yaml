openapi: 3.0.0
info:
  description: "This public service is supposed to be used to get informations related to projects and manage deployments."
  version: 1.0.0
  title: Deploymnet Management - Project API
servers:
  - url: http://localhost:3000
tags:
  - name: project
  - name: deployment
paths:
  /data/aggregation:
    get:
      security:
        - admin: []
      tags:
        - data aggregation
      summary: get infos on the data aggergion events for a specific projectId
      parameters:
      - name: projectId
        in: path
        required: true
        schema: 
          type: 'string'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /token:
    get:
      security:
        - admin: []
      tags:
        - token
      summary: get authorization token
      description: 'It returns a paginated list of deployments for the given project'
      operationId: listProjects
      responses:
        '200':
          description: 'OK'
          headers:
            Link:
              description: 'Contains the pagination data'
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      security:
        - admin: []
      tags:
        - project
      summary: List all projects
      description: 'It returns a paginated list of deployments for the given project'
      operationId: listProjects
      responses:
        '200':
          description: 'OK'
          headers:
            Link:
              description: 'Contains the pagination data'
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
               type: 'array'
               items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}:
    get:
      security:
        - admin: []
      tags:
        - project
      summary: Get a project
      description: Retrieve the project based on its name
      operationId: getProject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{id}/deployment:
    post:
      security:
        - admin: []
      tags:
        - project
      summary: Trigger a new deployment for a project
      description: This endpoint will trigger a new deployment with the status `pending`
      operationId: createProjectDeployment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deployments:
    get:
      security:
        - admin: []
      tags:
        - deployment
      summary: List all deployments
      description: 'It returns a paginated list of deployments'
      operationId: listDeployments
      responses:
        '200':
          description: 'OK'
          headers:
            Link:
              description: 'Contains the pagination data'
              schema:
                $ref: '#/components/schemas/Pagination'
          content:
            application/json:
              schema:
               type: 'array'
               items:
                  $ref: '#/components/schemas/Deployment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deployments/{id}:
    get:
      security:
        - admin: []
      tags:
        - deployment
      summary: Get a deployment
      description: Retrieve the deployments based on its id
      operationId: getDepoyment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deployments/{id}/stats:
    get:
      security:
        - admin: []
      tags:
        - deployment
      summary: Get the stats for a specific deployment and a specific user
      description: Retrieve the deployments based on its id
      operationId: getDepoyment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deployments/{id}/cancel:
    post:
      security:
        - admin: []
      tags:
        - deployment
      summary: Cancel a deployment
      description: Cancel an on-going deployment
      operationId: cancelDeployment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deployment/webhook:
    post:
      security:
        - webhook: []
      tags:
        - deployment
      summary: Update the status of a deployment
      description: Webhook endpoint that is used to receive status updates for a deployment
      operationId: deploymentStatusUpdate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: id of the deployment to update
                status:
                  type: 'string'
                  enum: ['pending', 'building', 'deploying', 'failed', 'cancelled', 'done']
              required: ['id', 'status']
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    DeploymentStats:
      type: 'object'
      properties:
        avgWeeklyCounter: 
          type: number
        avgWeeklySuccess:
          type: number
      example:
        avgWeeklyCounter: 1
        avgWeeklySuccess: 0
    DataAggregation:
        type: 'object'
        properties:
          name:
            type: 'string'
          payload:
            type: 'object'
          createdAt:
            type: 'string'
        example:
          authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2OTAwMzgzMTJ9.dkefIPOGclfLpM3yRp9GfjVTuMB2W0uEFWj406Q7VYY"
    Token:
      type: 'object'
      properties:
        authorization:
          type: 'string'
      example:
        name: "Deployment Creation Event"
        payload: 
          message: "deployment for project: 1 created with id: 1"
        createdAt: "2023-07-22T15:11:52.833Z"
    Error:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
      required:
        - name
        - message
    Project:
      type: 'object'
      properties:
        id:
          type: 'integer'
        name:
          type: 'string'
        hasLiveDeployment:
          type: 'boolean'
          default: false
        hasPendingDeployment:
          type: 'boolean'
          default: false
        url:
          type: 'string'
      required: ['id', 'name', 'hasLiveDeployment', 'hasPendingDeployment']
    Deployment:
      type: 'object'
      properties:
        id:
          type: 'integer'
        deployedIn:
          type: 'integer'
        status:
          type: 'string'
          enum: ['pending', 'building', 'deploying', 'failed', 'cancelled', 'done']
          default: 'pending'
        createdAt:
          type: 'string'
          format: 'date-time'
      required: ['id', 'status', 'createdAt']
    Pagination:
      type: 'string'
      example: '<http://localhost?page=1>; rel="first", <http://localhost?page=3>; rel="next", <http://localhost?page=3>; rel="last", <http://localhost?page=1>; rel="previous"'
  securitySchemes:
    admin:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'
    webhook:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'
